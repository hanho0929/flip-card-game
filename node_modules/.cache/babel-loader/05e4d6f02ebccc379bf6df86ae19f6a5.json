{"ast":null,"code":"var _jsxFileName = \"/Users/hanho/Desktop/MyGit/flip-card-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Dialog, DialogActions, Button, DialogTitle } from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport cardsArray, { shuffleCards } from './cardsArray';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState(() => shuffleCards(cardsArray.concat(cardsArray))); // Example cardArray [2D,2H,2D,2H]\n\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const timeout = useRef(null);\n\n  const disableAllCards = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enableAllCards = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkAllPairs = () => {\n    // console.log(\"CHECKING if it all done\", clearedCards);\n    if (Object.keys(clearedCards).length === cardsArray.length) {\n      setShowModal(true); // console.log(\"You Win!!\");\n    } else {\n      // is not able to show dialog\n      console.log('Not finished yet');\n      setShowModal(false);\n    }\n  };\n\n  const comparison = () => {\n    const [firstCard, secondCard] = openCards;\n    enableAllCards();\n\n    if (cards[firstCard].type === cards[secondCard].type) {\n      setClearedCards(prev => ({ ...prev,\n        [cards[firstCard].type]: true\n      }));\n      setOpenCards([]);\n      return;\n    } // This is to flip the cards back if they r not the same\n\n\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n\n  const handleCardClick = index => {\n    if (openCards.length === 1) {\n      // second flip append to openCard array and disable all click\n      setOpenCards(prev => [...prev, index]);\n      disableAllCards();\n    } else {\n      // first flip add to openCard with the index\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null; // if (openCards.length >= 2) {\n    //   timeout = setTimeout(comparison, 300);\n    // }\n\n    if (openCards.length === 2) {\n      // everytime i opend two card check if they are the same\n      timeout = setTimeout(comparison, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n  useEffect(() => {\n    // console.log(cardsArray);\n    checkAllPairs();\n  }, [clearedCards]);\n\n  const isFlipped = index => {\n    return openCards.includes(index);\n  };\n\n  const isInactive = card => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    // clean\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false); // shuffle again\n\n    setCards(shuffleCards(cardsArray.concat(cardsArray)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Flip card game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          card: card,\n          index: index,\n          isDisabled: shouldDisableAllCards,\n          isInactive: Boolean(clearedCards[card.type]),\n          isFlipped: openCards.includes(index),\n          onClick: handleCardClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showModal,\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"You completed the challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pmkZ3aDgNcGv7PmyqSVg6KDn9kI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hanho/Desktop/MyGit/flip-card-game/src/App.js"],"names":["useEffect","useState","useRef","Dialog","DialogActions","Button","DialogTitle","Card","cardsArray","shuffleCards","App","cards","setCards","concat","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","showModal","setShowModal","timeout","disableAllCards","enableAllCards","checkAllPairs","Object","keys","length","console","log","comparison","firstCard","secondCard","type","prev","current","setTimeout","handleCardClick","index","clearTimeout","isFlipped","includes","isInactive","card","Boolean","handleRestart","map"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SACEC,MADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,WAJF,QAKO,mBALP;AAMA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,IAAoBC,YAApB,QAAuC,cAAvC;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,MACjCQ,YAAY,CAACD,UAAU,CAACK,MAAX,CAAkBL,UAAlB,CAAD,CADoB,CAAlC,CAD4B,CAI5B;;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,qBAAD,EAAwBC,wBAAxB,IAAoDlB,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMqB,OAAO,GAAGpB,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMqB,eAAe,GAAG,MAAM;AAC5BJ,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GAFD;;AAGA,QAAMK,cAAc,GAAG,MAAM;AAC3BL,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,GAFD;;AAIA,QAAMM,aAAa,GAAG,MAAM;AAC1B;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYX,YAAZ,EAA0BY,MAA1B,KAAqCpB,UAAU,CAACoB,MAApD,EAA4D;AAC1DP,MAAAA,YAAY,CAAC,IAAD,CAAZ,CAD0D,CAE1D;AACD,KAHD,MAGO;AAAE;AACPQ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GATD;;AAWA,QAAMU,UAAU,GAAG,MAAM;AACvB,UAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BnB,SAAhC;AACAU,IAAAA,cAAc;;AACd,QAAIb,KAAK,CAACqB,SAAD,CAAL,CAAiBE,IAAjB,KAA0BvB,KAAK,CAACsB,UAAD,CAAL,CAAkBC,IAAhD,EAAsD;AACpDjB,MAAAA,eAAe,CAAEkB,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAW,SAACxB,KAAK,CAACqB,SAAD,CAAL,CAAiBE,IAAlB,GAAyB;AAApC,OAAX,CAAD,CAAf;AACAnB,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACA;AACD,KAPsB,CAQvB;;;AACAO,IAAAA,OAAO,CAACc,OAAR,GAAkBC,UAAU,CAAC,MAAM;AACjCtB,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAF2B,EAEzB,GAFyB,CAA5B;AAGD,GAZD;;AAaA,QAAMuB,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAIzB,SAAS,CAACc,MAAV,KAAqB,CAAzB,EAA4B;AAAE;AAC5Bb,MAAAA,YAAY,CAAEoB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUI,KAAV,CAAX,CAAZ;AACAhB,MAAAA,eAAe;AAChB,KAHD,MAGO;AAAE;AACPiB,MAAAA,YAAY,CAAClB,OAAO,CAACc,OAAT,CAAZ;AACArB,MAAAA,YAAY,CAAC,CAACwB,KAAD,CAAD,CAAZ;AACD;AACF,GARD;;AAUAvC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,OAAO,GAAG,IAAd,CADc,CAGd;AACA;AACA;;AACA,QAAIR,SAAS,CAACc,MAAV,KAAqB,CAAzB,EAA4B;AAAE;AAC5BN,MAAAA,OAAO,GAAGe,UAAU,CAACN,UAAD,EAAa,GAAb,CAApB;AACD;;AACD,WAAO,MAAM;AACXS,MAAAA,YAAY,CAAClB,OAAD,CAAZ;AACD,KAFD;AAGD,GAZQ,EAYN,CAACR,SAAD,CAZM,CAAT;AAcAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACAyB,IAAAA,aAAa;AACd,GAHQ,EAGN,CAACT,YAAD,CAHM,CAAT;;AAKA,QAAMyB,SAAS,GAAIF,KAAD,IAAW;AAC3B,WAAOzB,SAAS,CAAC4B,QAAV,CAAmBH,KAAnB,CAAP;AACD,GAFD;;AAIA,QAAMI,UAAU,GAAIC,IAAD,IAAU;AAC3B,WAAOC,OAAO,CAAC7B,YAAY,CAAC4B,IAAI,CAACV,IAAN,CAAb,CAAd;AACD,GAFD;;AAIA,QAAMY,aAAa,GAAG,MAAM;AAC1B;AACA7B,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAM,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,wBAAwB,CAAC,KAAD,CAAxB,CAL0B,CAM1B;;AACAP,IAAAA,QAAQ,CAACH,YAAY,CAACD,UAAU,CAACK,MAAX,CAAkBL,UAAlB,CAAD,CAAb,CAAR;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGG,KAAK,CAACoC,GAAN,CAAU,CAACH,IAAD,EAAOL,KAAP,KAAiB;AAC1B,4BACE,QAAC,IAAD;AAEE,UAAA,IAAI,EAAEK,IAFR;AAGE,UAAA,KAAK,EAAEL,KAHT;AAIE,UAAA,UAAU,EAAErB,qBAJd;AAKE,UAAA,UAAU,EAAE2B,OAAO,CAAC7B,YAAY,CAAC4B,IAAI,CAACV,IAAN,CAAb,CALrB;AAME,UAAA,SAAS,EAAEpB,SAAS,CAAC4B,QAAV,CAAmBH,KAAnB,CANb;AAOE,UAAA,OAAO,EAAED;AAPX,WACOC,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OAZA;AADH;AAAA;AAAA;AAAA;AAAA,YAJF,eAmBE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEO,aAAjB;AAAgC,UAAA,KAAK,EAAC,SAAtC;AAAgD,UAAA,OAAO,EAAC,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF,eA0BE,QAAC,MAAD;AACE,MAAA,IAAI,EAAE1B,SADR;AAEE,MAAA,oBAAoB,MAFtB;AAGE,MAAA,oBAAoB,MAHtB;AAAA,8BAKE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAQE,QAAC,aAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE0B,aAAjB;AAAgC,UAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD;;GApIuBpC,G;;KAAAA,G","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  Button,\n  DialogTitle\n} from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport cardsArray ,{shuffleCards} from './cardsArray'\n\n\nexport default function App() {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(cardsArray.concat(cardsArray))\n  );\n  // Example cardArray [2D,2H,2D,2H]\n  const [openCards, setOpenCards] = useState([]); \n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const timeout = useRef(null);\n\n  const disableAllCards = () => {\n    setShouldDisableAllCards(true);\n  };\n  const enableAllCards = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkAllPairs = () => {\n    // console.log(\"CHECKING if it all done\", clearedCards);\n    if (Object.keys(clearedCards).length === cardsArray.length) {\n      setShowModal(true);\n      // console.log(\"You Win!!\");\n    } else { // is not able to show dialog\n      console.log('Not finished yet');\n      setShowModal(false);\n    }\n  };\n\n  const comparison = () => {\n    const [firstCard, secondCard] = openCards;\n    enableAllCards();\n    if (cards[firstCard].type === cards[secondCard].type) {\n      setClearedCards((prev) => ({ ...prev, [cards[firstCard].type]: true }));\n      setOpenCards([]);\n      return;\n    }\n    // This is to flip the cards back if they r not the same\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) { // second flip append to openCard array and disable all click\n      setOpenCards((prev) => [...prev, index]);\n      disableAllCards();\n    } else { // first flip add to openCard with the index\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n    \n    // if (openCards.length >= 2) {\n    //   timeout = setTimeout(comparison, 300);\n    // }\n    if (openCards.length === 2) { // everytime i opend two card check if they are the same\n      timeout = setTimeout(comparison, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n\n  useEffect(() => {\n    // console.log(cardsArray);\n    checkAllPairs();\n  }, [clearedCards]);\n\n  const isFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const isInactive = (card) => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    // clean\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false);\n    // shuffle again\n    setCards(shuffleCards(cardsArray.concat(cardsArray)));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>Flip card game</h3>\n      </header>\n      <div className=\"container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={index}\n              card={card}\n              index={index}\n              isDisabled={shouldDisableAllCards}\n              isInactive={Boolean(clearedCards[card.type])}\n              isFlipped={openCards.includes(index)}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className=\"restart\">\n          <Button onClick={handleRestart} color=\"primary\" variant=\"contained\">\n            Restart\n          </Button>\n        </div>\n      </footer>\n      <Dialog\n        open={showModal}\n        disableBackdropClick\n        disableEscapeKeyDown\n      >\n        <DialogTitle>\n          You completed the challenge\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">\n            Restart\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}