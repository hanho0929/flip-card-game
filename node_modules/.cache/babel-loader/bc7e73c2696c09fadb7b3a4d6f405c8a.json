{"ast":null,"code":"var _jsxFileName = \"/Users/hanho/Desktop/React/FRE-Training-031521/flip-card-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Dialog, DialogActions, Button, DialogTitle } from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport uniqueCardsArray from './cardsArray';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffleCards(array) {\n  const length = array.length;\n\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    const temp = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temp;\n  }\n\n  return array;\n}\n\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState(() => shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [bestScore, setBestScore] = useState(JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY);\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueCardsArray.length) {\n      setShowModal(true); // console.log(\"You Win!!\");\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n\n    if (cards[first].type === cards[second].type) {\n      setClearedCards(prev => ({ ...prev,\n        [cards[first].type]: true\n      }));\n      setOpenCards([]);\n      return;\n    } // This is to flip the cards back after cetain time duration\n\n\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n\n  const handleCardClick = index => {\n    if (openCards.length === 1) {\n      setOpenCards(prev => [...prev, index]);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n\n  const checkIsFlipped = index => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = card => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false); // shuffle again with random\n\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Flip card game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          card: card,\n          index: index,\n          isDisabled: shouldDisableAllCards,\n          isInactive: checkIsInactive(card),\n          isFlipped: checkIsFlipped(index),\n          onClick: handleCardClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showModal,\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"You completed the challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zTwvYQPgQrNmBcD+/I0rmFwcB3k=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hanho/Desktop/React/FRE-Training-031521/flip-card-game/src/App.js"],"names":["useEffect","useState","useRef","Dialog","DialogActions","Button","DialogTitle","Card","uniqueCardsArray","shuffleCards","array","length","i","randomIndex","Math","floor","random","currentIndex","temp","App","cards","setCards","concat","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","moves","setMoves","showModal","setShowModal","bestScore","setBestScore","JSON","parse","localStorage","getItem","Number","POSITIVE_INFINITY","timeout","disable","enable","checkCompletion","Object","keys","evaluate","first","second","type","prev","current","setTimeout","handleCardClick","index","clearTimeout","checkIsFlipped","includes","checkIsInactive","card","Boolean","handleRestart","map"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  Button,\n  DialogTitle\n} from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport uniqueCardsArray from './cardsArray'\n\nfunction shuffleCards(array) {\n  const length = array.length;\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    const temp = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temp;\n  }\n  return array;\n}\nexport default function App() {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(uniqueCardsArray.concat(uniqueCardsArray))\n  );\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [bestScore, setBestScore] = useState(\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\n  );\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      // console.log(\"You Win!!\");\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n    if (cards[first].type === cards[second].type) {\n      setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\n      setOpenCards([]);\n      return;\n    }\n    // This is to flip the cards back after cetain time duration\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpenCards((prev) => [...prev, index]);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = (card) => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false);\n    // shuffle again with random\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>Flip card game</h3>\n      </header>\n      <div className=\"container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={index}\n              card={card}\n              index={index}\n              isDisabled={shouldDisableAllCards}\n              isInactive={checkIsInactive(card)}\n              isFlipped={checkIsFlipped(index)}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className=\"restart\">\n          <Button onClick={handleRestart} color=\"primary\" variant=\"contained\">\n            Restart\n          </Button>\n        </div>\n      </footer>\n      <Dialog\n        open={showModal}\n        disableBackdropClick\n        disableEscapeKeyDown\n      >\n        <DialogTitle>\n          You completed the challenge\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">\n            Restart\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}