{"ast":null,"code":"var _jsxFileName = \"/Users/hanho/Desktop/React/FRE-Training-031521/flip-card-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Dialog, DialogActions, Button, DialogTitle } from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport uniqueCardsArray, { shuffleCards } from './cardsArray';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState(() => shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueCardsArray.length) {\n      setShowModal(true); // console.log(\"You Win!!\");\n    }\n  };\n\n  const evaluate = () => {\n    const [firstCard, secondCard] = openCards;\n    enable();\n\n    if (cards[firstCard].type === cards[secondCard].type) {\n      setClearedCards(prev => ({ ...prev,\n        [cards[firstCard].type]: true\n      })); //setOpenCards([]);\n      //console.log(\"firstCard\",checkIsInactive(firstCard));\n      //console.log(\"secondCard\",checkIsInactive(secondCard));\n\n      return;\n    } // This is to flip the cards back after cetain time duration\n\n\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n\n  const handleCardClick = index => {\n    if (openCards.length === 1) {\n      setOpenCards(prev => [...prev, index]);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n\n  const checkIsFlipped = index => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = card => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false); // shuffle again with random\n\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Flip card game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          card: card,\n          index: index,\n          isDisabled: shouldDisableAllCards,\n          isInactive: checkIsInactive(card),\n          isFlipped: checkIsFlipped(index),\n          onClick: handleCardClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showModal,\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"You completed the challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRestart,\n          color: \"primary\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RytQtG9ger7nPOtOT+1/5SqcXxA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hanho/Desktop/React/FRE-Training-031521/flip-card-game/src/App.js"],"names":["useEffect","useState","useRef","Dialog","DialogActions","Button","DialogTitle","Card","uniqueCardsArray","shuffleCards","App","cards","setCards","concat","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","showModal","setShowModal","timeout","disable","enable","checkCompletion","Object","keys","length","evaluate","firstCard","secondCard","type","prev","current","setTimeout","handleCardClick","index","clearTimeout","checkIsFlipped","includes","checkIsInactive","card","Boolean","handleRestart","map"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  Button,\n  DialogTitle\n} from \"@material-ui/core\";\nimport Card from \"./components/card/card\";\nimport \"./app.scss\";\nimport uniqueCardsArray ,{shuffleCards} from './cardsArray'\n\n\nexport default function App() {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(uniqueCardsArray.concat(uniqueCardsArray))\n  );\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      // console.log(\"You Win!!\");\n    }\n  };\n\n  const evaluate = () => {\n    const [firstCard, secondCard] = openCards;\n    enable();\n    if (cards[firstCard].type === cards[secondCard].type) {\n      setClearedCards((prev) => ({ ...prev, [cards[firstCard].type]: true }));\n      //setOpenCards([]);\n      //console.log(\"firstCard\",checkIsInactive(firstCard));\n      //console.log(\"secondCard\",checkIsInactive(secondCard));\n      return;\n    }\n    // This is to flip the cards back after cetain time duration\n    \n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 200);\n  };\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpenCards((prev) => [...prev, index]);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = (card) => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setShouldDisableAllCards(false);\n    // shuffle again with random\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>Flip card game</h3>\n      </header>\n      <div className=\"container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={index}\n              card={card}\n              index={index}\n              isDisabled={shouldDisableAllCards}\n              isInactive={checkIsInactive(card)}\n              isFlipped={checkIsFlipped(index)}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className=\"restart\">\n          <Button onClick={handleRestart} color=\"primary\" variant=\"contained\">\n            Restart\n          </Button>\n        </div>\n      </footer>\n      <Dialog\n        open={showModal}\n        disableBackdropClick\n        disableEscapeKeyDown\n      >\n        <DialogTitle>\n          You completed the challenge\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">\n            Restart\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}